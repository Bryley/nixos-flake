#!/usr/bin/env python3

import subprocess
from typing import OrderedDict
from rich import print
from yaml import safe_load
from os import environ
from pathlib import Path
import sys

WallpaperData = OrderedDict[str, list[str]]

DEST = Path("~/wallpaper").expanduser()


def main():
    args = sys.argv
    if len(args) != 2 and len(args) != 3:
        print_help()
        return

    data = fetch_wallpapers()
    (current_group, current_wallpaper) = get_wall(data)

    if len(args) == 2 and args[1] == "current":
        display_all(data, current_group, current_wallpaper)

    elif len(args) == 2 and args[1] == "prev":
        group = data[current_group]
        index = group.index(current_wallpaper)
        new_wallpaper = group[(index + 1) % len(group)]
        set_wall(current_group, new_wallpaper)
        display(group, index + 1)

    elif len(args) == 2 and args[1] == "next":
        group = data[current_group]
        index = group.index(current_wallpaper)
        new_wallpaper = group[(index - 1) % len(group)]
        set_wall(current_group, new_wallpaper)
        display(group, index - 1)

    elif len(args) == 3 and args[1] == "group":
        raise Exception("Not yet implemented!")
        groups = list(data.keys())
        index = groups.index(current_group)
        new_group = ""
        new_wallpaper = ""
        if args[2] == "next":
            new_group = groups[(index + 1) % len(groups)]
        elif args[2] == "prev":
            new_group = groups[(index - 1) % len(groups)]
        else:
            print_help()
            return

        # environ["WALLPAPER_GROUP"] = new_group
        (new_group, new_wallpaper) = get_wall(data)
        # environ["WALLPAPER"] = new_wallpaper
        display_all(data, new_group, new_wallpaper)
    else:
        print_help()


def set_wall(group: str, wallpaper: str):
    path = Path("~/.config/hypr/wallpapers/").expanduser() / wallpaper

    if DEST.exists() or DEST.is_symlink():
        DEST.unlink()
    DEST.symlink_to(path)
    subprocess.run(
        ["swww", "img", "-t", "center", Path("~/wallpaper").expanduser()], check=True
    )


def get_wall(data: WallpaperData) -> tuple[str, str]:
    name = "./oled-mountains.jpg"  # Default
    if DEST.exists():
        path = DEST.resolve()
        name = f"./{path.name}"

    return ("all", name)


def display(list_value: list[str], index: int, amount: int = 2):

    str_builder = []
    for i in range(-amount, amount + 1):
        col = "bold cyan" if i == 0 else "bright_black"
        val = list_value[(index - i) % len(list_value)]
        str_builder.append(f"[{col}]{val}[/{col}]")

    print(f"... {'  '.join(str_builder)} ...")


def display_all(data: WallpaperData, group: str, wallpaper: str):
    # Display group
    groups = list(data.keys())
    index = groups.index(group)
    print("Groups:")
    display(groups, index)

    # Display wallpaper
    g = data[group]
    index = g.index(wallpaper)
    print("\nWallpapers:")
    display(g, index)


def fetch_wallpapers() -> WallpaperData:
    with open(Path("~/.config/hypr/wallpapers/wallpaper.yaml").expanduser(), "r") as file:
        wallpaper_data = safe_load(file)

    groups: OrderedDict[str, list[str]] = OrderedDict()
    groups["all"] = []
    for img_data in wallpaper_data["images"]:
        name: str = img_data["name"]
        tags: list[str] = img_data["tags"]

        groups["all"].append(name)
        for tag in tags:
            if tag not in groups:
                groups[tag] = []

            groups[tag].append(name)

    return groups


def old_fetch_current(data: WallpaperData) -> tuple[str, str]:
    """
    Returns:
    (Group, Name)
    """
    current_group = environ.get("WALLPAPER_GROUP") or "all"

    if current_group not in data:
        current_group = "all"

    current_wallpaper = environ.get("WALLPAPER") or data[current_group][0]

    if current_wallpaper not in data[current_group]:
        current_wallpaper = data[current_group][0]

    return (current_group, current_wallpaper)


def print_help():
    print("Command failed try:")
    print(f"    $ {sys.argv[0]} <next|prev|current|group <group>>")


if __name__ == "__main__":
    main()
